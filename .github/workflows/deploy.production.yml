# Now Github Action Workflow is safety than before
# If your code build failed, it will not stop your web application, your website will work normally
# When Code build complete, Server will only restart (temporary down) in just one or few second
# To improve your Web application quality after each build. I suggest to integrate E2E Test Headless like cypress or Unit test.
name: Deploy to Production

on:
  push:
    branches: ["release"]

env:
  APP_ENV: ${{ secrets.PRODUCTION }}

jobs:
  build:
    name: "Deploy to Production"
    environment:
      name: production

    runs-on: [self-hosted, production]

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Delete old env file
        run: rm -r -f .env

      - name: Create env_temp file
        run: touch .env_temp

      - name: Copy Secret Key Multiline environment variable to .env_temp file
        run: echo $APP_ENV | tee .env_temp

      - name: Replace space character with break-line in .env file
        run: sed 's/ /\n/g' .env_temp >> .env

      - name: Set Github Commit SHA ID
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Append Github Commit SHA ID to .env file
        run: echo NEXT_PUBLIC_GIT_COMMIT_SHA=${{ steps.vars.outputs.sha_short }} >> .env

      - name: Remove .env_temp file
        run: rm -r -f .env_temp

      # Reference from offical Docker youtube channel: https://youtu.be/aNh8iShFXto
      - name: Build Docker and deployment
        run: sudo chmod +x docker-build.sh && sudo ./docker-build.sh
